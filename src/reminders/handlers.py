import logging
from enum import Enum

from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from src.handlers import cancel, main_keyboard
from src.reminders import services as event_service
from src.reminders.schemes import EventCreateScheme, EventRepeatInterval
from src.reminders.utils import format_event_list

logger = logging.getLogger(__name__)


class EventDialogStates(Enum):
    SELECT_ACTION = "select_action"
    ADD_DESCRIPTION = "add_description"
    ADD_EVENT_DATETIME = "add_event_datetime"
    ADD_REPEAT_INTERVAL = "add_repeat_interval"
    ADD_MESSAGE_COUNT = "add_message_count"
    CONFIRM_EVENT = "confirm_event"
    EDIT_EVENT = "edit_event"
    DELETE_EVENT = "delete_event"
    LIST_EVENTS = "list_events"
    EDIT_NAME = "edit_name"
    EDIT_EVENT_DATETIME = "edit_event_datetime"
    EDIT_REPEAT_INTERVAL = "edit_repeat_interval"
    CONFIRM_EDIT = " confirm_edit"


async def add_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=ReplyKeyboardRemove())
    return EventDialogStates.ADD_DESCRIPTION


async def add_event_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM):")
    return EventDialogStates.ADD_EVENT_DATETIME


async def add_event_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_time_str = update.message.text
    if not event_service.validate_date_time(date_time_str):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM):"
        )
        return EventDialogStates.ADD_EVENT_DATETIME

    context.user_data["event_datetime"] = date_time_str
    repeat_interval_keyboard = [[interval.value] for interval in list(EventRepeatInterval)]
    repeat_interval_keyboard.extend([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]])
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(repeat_interval_keyboard, resize_keyboard=True),
    )
    return EventDialogStates.ADD_REPEAT_INTERVAL


async def add_event_repeat_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    repeat_interval = update.message.text.lower() if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    context.user_data["repeat_interval"] = repeat_interval
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π(—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0) –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return EventDialogStates.ADD_MESSAGE_COUNT


async def add_event_message_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_count: str = update.message.text or "3"
    if not message_count.isdigit():
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return EventDialogStates.ADD_MESSAGE_COUNT
    context.user_data["message_count"] = int(message_count)
    await confirm_event(update, context)
    return EventDialogStates.CONFIRM_EVENT


async def confirm_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        description = context.user_data.get("description")
        date_time = context.user_data.get("event_datetime")
        repeat_interval = context.user_data.get("repeat_interval")
        message_count = context.user_data.get("message_count")

        message = f"–°–æ–±—ã—Ç–∏–µ:\nüóìÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n‚è∞ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {date_time}\nüîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {repeat_interval or '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ'}\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}"
        await update.message.reply_text(
            f"{message}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–∞/–Ω–µ—Ç):", reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ùå",
            reply_markup=main_keyboard,
        )
        return ConversationHandler.END


async def confirm_event_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        confirmation = update.message.text.lower()
        if confirmation != "–¥–∞":
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚ùå")
            return ConversationHandler.END
        event = EventCreateScheme(
            description=context.user_data.get("description"),
            event_datetime=context.user_data.get("event_datetime"),
            repeat_interval=context.user_data.get("repeat_interval"),
            message_count=context.user_data.get("message_count"),
        )

        result_event = await event_service.add_event_by_tg(
            event,
            update.effective_user.id,
            update.effective_chat.id,
            update.effective_user.first_name,
            update.effective_user.last_name,
        )
        if result_event:
            await update.message.reply_text(
                f"–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ\nüìÖ {result_event.description}\n‚è∞ {result_event.event_datetime}",
                reply_markup=main_keyboard,
            )
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ùå")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ùå",
            reply_markup=main_keyboard,
        )
        return ConversationHandler.END


async def get_list_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        events = await event_service.get_all_events(update.effective_user.id)
        if events:
            message = format_event_list(events)
        else:
            message = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. üìã"
        await update.message.reply_text(
            text=message,
            reply_markup=main_keyboard,
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
        return ConversationHandler.END


async def delete_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        events = await event_service.get_all_events(update.effective_user.id)
        if events:
            message = format_event_list(events)
        else:
            message = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. üìã"
            await update.message.reply_text(message, reply_markup=main_keyboard)
            return ConversationHandler.END
        await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ id —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        return EventDialogStates.DELETE_EVENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
        return ConversationHandler.END


async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        event_id = update.message.text
        if not event_id or not event_id.isdigit():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return EventDialogStates.DELETE_EVENT
        await event_service.delete_event(int(event_id), update.effective_user.id)
        await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ —Å ID={event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ. ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
    return ConversationHandler.END


async def edit_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        events = await event_service.get_all_events(update.effective_user.id)
        if events:
            message = format_event_list(events)
        else:
            message = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. üìã"
            await update.message.reply_text(message, reply_markup=main_keyboard)
            return ConversationHandler.END
        await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ id —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        return EventDialogStates.EDIT_EVENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
        return ConversationHandler.END


async def choice_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        event_id = update.message.text
        if not event_id or not event_id.isdigit():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return EventDialogStates.EDIT_EVENT

        context.user_data["event_id"] = event_id
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
        return EventDialogStates.EDIT_NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
        return ConversationHandler.END


async def edit_event_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["edit_description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM):")
    return EventDialogStates.EDIT_EVENT_DATETIME


async def edit_event_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_time_str = update.message.text
    if not event_service.validate_date_time(date_time_str):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM):"
        )
        return EventDialogStates.EDIT_EVENT_DATETIME

    context.user_data["edit_datetime"] = date_time_str
    repeat_interval_keyboard = [[interval.value] for interval in list(EventRepeatInterval)]
    repeat_interval_keyboard.extend([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]])
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(repeat_interval_keyboard, resize_keyboard=True),
    )
    return EventDialogStates.EDIT_REPEAT_INTERVAL


async def edit_event_repeat_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    repeat_interval = update.message.text.lower()
    context.user_data["edit_repeat_interval"] = repeat_interval if repeat_interval != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    await confirm_edit(update, context)
    return EventDialogStates.CONFIRM_EDIT


async def confirm_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        description = context.user_data.get("edit_description")
        event_datetime = context.user_data.get("edit_datetime")
        repeat_interval = context.user_data.get("edit_repeat_interval")

        message = f"–°–æ–±—ã—Ç–∏–µ:\nüìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {description}\n‚è∞ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {event_datetime}\nüîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {repeat_interval or '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ'}"
        await update.message.reply_text(f"{message}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–∞/–Ω–µ—Ç):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ùå",
            reply_markup=main_keyboard,
        )
        return ConversationHandler.END


async def confirm_edit_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        confirmation = update.message.text.lower()
        if confirmation != "–¥–∞":
            await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚ùå", reply_markup=main_keyboard)
            return ConversationHandler.END

        description = context.user_data.get("edit_description")
        event_datetime = context.user_data.get("edit_datetime")
        repeat_interval = context.user_data.get("edit_repeat_interval")
        event_id = int(context.user_data.get("event_id"))

        result = await event_service.update_event(event_id, description, event_datetime, repeat_interval)
        if result:
            await update.message.reply_text(
                f"–°–æ–±—ã—Ç–∏–µ —Å ID={event_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ", reply_markup=main_keyboard
            )
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ —Å ID={event_id} –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. ‚ùå", reply_markup=main_keyboard)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ùå")
        return ConversationHandler.END


async def start_reminders_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    finance_keyboard = ReplyKeyboardMarkup(
        [["–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"], ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"], ["–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"], ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"]],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=finance_keyboard)


def register_reminder_handler(application: Application):
    start_handler = MessageHandler(filters.Regex("^–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$"), start_reminders_handler)

    add_event_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), add_event_start)],
        states={
            EventDialogStates.ADD_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_event_description)],
            EventDialogStates.ADD_MESSAGE_COUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_event_message_count)
            ],
            EventDialogStates.ADD_EVENT_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_event_datetime)],
            EventDialogStates.ADD_REPEAT_INTERVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_event_repeat_interval)
            ],
            EventDialogStates.CONFIRM_EVENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_event_submission)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    edit_event_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), edit_event_start)],
        states={
            EventDialogStates.EDIT_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, choice_event)],
            EventDialogStates.EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_event_description)],
            EventDialogStates.EDIT_EVENT_DATETIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_event_datetime)
            ],
            EventDialogStates.EDIT_REPEAT_INTERVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_event_repeat_interval)
            ],
            EventDialogStates.CONFIRM_EDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_edit_submission)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    delete_event_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), delete_event_start)],
        states={
            EventDialogStates.DELETE_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_event)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    list_events_handler = MessageHandler(filters.Regex("^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$"), get_list_events)
    application.add_handler(start_handler)
    application.add_handler(add_event_handler)
    application.add_handler(edit_event_handler)
    application.add_handler(delete_event_handler)
    application.add_handler(list_events_handler)
