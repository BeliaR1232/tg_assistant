from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes, ConversationHandler

from src.database import db_helper
from src.expense.exceptions import BadExpense
from src.expense.schemes import ExpenseCreateScheme
from src.expense.service import add_expense, get_all_category
from src.handlers import main_keyboard

AMOUNT, CATEGORY, DESCRIPTION = range(3)

session = db_helper.session_factory()


async def add_expense_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
    return AMOUNT


async def process_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = update.message.text.replace(",", ".")
        amount = abs(float(amount))
        context.user_data["amount"] = amount
        categories = await get_all_category(session)

        category_keybord = [[category.name] for category in categories]
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=ReplyKeyboardMarkup(
                category_keybord,
                resize_keyboard=True,
            ),
        )
        return CATEGORY
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        return AMOUNT


async def process_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    context.user_data["category"] = category
    skip_mark = ReplyKeyboardMarkup(
        [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ...",
    )
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=skip_mark)
    return DESCRIPTION


async def process_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    user_data = context.user_data
    expense = ExpenseCreateScheme(
        amount=user_data["amount"],
        category_name=user_data["category"],
        description=description,
    )

    expense = await add_expense(session, expense, update)
    answer = f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã —Ç—Ä–∞—Ç—ã üõí:\n–°—É–º–º–∞: {expense.amount}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category_name}"
    await update.message.reply_text(answer, reply_markup=main_keyboard)
    return ConversationHandler.END


async def add_expense_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_expense = context.args
    try:
        expense = await add_expense(session, raw_expense, update)
    except BadExpense:
        answer = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: '100 –∫–∞—Ñ–µ' –∏–ª–∏ '–∫–∞—Ñ–µ 100'."
    else:
        answer = f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã —Ç—Ä–∞—Ç—ã üõí:\n–°—É–º–º–∞: {expense.amount}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category_name}"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)
