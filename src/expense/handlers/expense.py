from enum import Enum

import pytz
from sqlalchemy.exc import SQLAlchemyError
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from src.expense.handlers.statistics import expense_template
from src.expense.schemes import ExpenseCreateScheme
from src.expense.service import (
    add_expense,
    delete_expense,
    get_all_category,
    get_top_expense,
)
from src.handlers import cancel, main_keyboard


class ExpenseState(Enum):
    AMOUNT = "amount"
    CATEGORY = "category"
    DESCRIPTION = "description"
    DELETE = "delete"


async def delete_expense_start(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    user_telegram_id = update.effective_user.id
    expenses = await get_top_expense(user_telegram_id)

    if not expenses:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return ConversationHandler.END

    answer = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞—Ç:\n\n" + "\n".join(
        expense_template.format(
            expense_id=expense.id,
            expense_category=expense.category_name,
            expense_desc=expense.description or "",
            expense_amount=expense.amount,
            expense_dt=expense.created_at.astimezone(pytz.timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S"),
        )
        for expense in expenses
    )

    await update.message.reply_text(answer, reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
    return ExpenseState.DELETE


async def delete_expense_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞."""
    expense_id = update.message.text
    if not expense_id or not expense_id.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–∞—Ç—ã.")
        return ExpenseState.DELETE

    try:
        await delete_expense(int(expense_id))
        await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ {expense_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=main_keyboard)
    except SQLAlchemyError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ExpenseState.DELETE

    return ConversationHandler.END


async def add_expense_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
    return ExpenseState.AMOUNT


async def process_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞."""
    try:
        amount = abs(float(update.message.text.replace(",", ".")))
        context.user_data["amount"] = amount

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return ExpenseState.AMOUNT

    categories = await get_all_category()

    category_keyboard = [[category.name] for category in categories]
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=ReplyKeyboardMarkup(category_keyboard, resize_keyboard=True),
    )
    return ExpenseState.CATEGORY


async def process_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
    context.user_data["category"] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True),
    )
    return ExpenseState.DESCRIPTION


async def process_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    description = update.message.text if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    user_data = context.user_data

    expense = ExpenseCreateScheme(
        amount=user_data["amount"],
        category_name=user_data["category"],
        description=description,
    )

    try:
        expense = await add_expense(
            expense,
            update.effective_user.id,
            update.effective_message.id,
            update.effective_user.first_name,
            update.effective_user.last_name,
        )
        await update.message.reply_text(
            f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã üõí:\n–°—É–º–º–∞: {expense.amount}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category_name}",
            reply_markup=main_keyboard,
        )
    except SQLAlchemyError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ExpenseState.AMOUNT

    return ConversationHandler.END


async def get_finance_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    finance_keyboard = ReplyKeyboardMarkup(
        [["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"], ["–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"]],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –æ—Ç—á—ë—Ç–∞:", reply_markup=finance_keyboard)


def register_expense_handler(application: Application):
    finance_handler = MessageHandler(filters.Regex("^–§–∏–Ω–∞–Ω—Å—ã$"), get_finance_start)

    add_expense_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$"), add_expense_start)],
        states={
            ExpenseState.AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_amount)],
            ExpenseState.CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_category)],
            ExpenseState.DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_description)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    delete_expense_handler_main = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$"), delete_expense_start)],
        states={
            ExpenseState.DELETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_expense_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(finance_handler)
    application.add_handler(add_expense_handler)
    application.add_handler(delete_expense_handler_main)
